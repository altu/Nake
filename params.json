{"name":"Nake","tagline":"Magic script-based C# task runner. C# V6 is supported!","body":"## Nake\r\n\r\nNake is a magic task runner tool for .NET. It's a hybrid of Shovel and Rake. The DSL for defining tasks is uniquely minimal and it's just plain C# code! Nake is built on top of the latest Roslyn release so you can use all of the C# V6 features in you scripts and even more.\r\n\r\n### How to install\r\n\r\nThere multiple ways in which Nake could be installed. You can install it by using NuGet [package](https://www.nuget.org/packages/Nake), or you can get it by downloading a [standalone](https://github.com/yevhen/Nake/releases) executable from GitHub releases page, and of course you can always build it from sources. \r\n\r\nTo install Nake via NuGet, run this command in NuGet package manager console:\r\n\r\n\tPM> Install-Package Nake\r\n\r\n## Scripting reference\r\n\r\n```cs\r\n#r \"System\"                             // \r\n#r \"System.Core\"\t                    //   #reference assemblies from the GAC \r\n#r \"System.Data\"\t                    //    (these are referenced by default)\r\n#r \"System.Xml\"                         //\r\n#r \"System.Xml.Linq\"                    //\r\n\r\n#r \"WindowsBase, Version=4.0.0.0 ...\"   //  you can reference assembly by its full name\r\n#r \"Packages\\NUnit.2.6.2\\nunit.dll\"     //        or by using relative path\r\n#r \"C:\\Orleans\\SDK\\Orleans.dll\"         //            or by absolute path\r\n\r\n#load \"Other.csx\"                       //      #load code from other script files\r\n#load \"Build\\Another.csx\"               //  (both absolute and relative paths are fine)\r\n\r\nusing System;                           //\r\nusing System.IO;                        //      standard C# namespace imports\r\nusing System.Linq;                      //     (these are imported by default)\r\nusing System.Text;                      //  \r\nusing System.Collections.Generic;       //  \r\n\r\nusing System.IO.Path;                   //    C# V6 \"using static members\" feature \r\nusing System.Console;                   //      will make you scripts more terse\r\n\r\nWriteLine(\"Are you ready? Y/N:\");       //      any code you put on the script level \r\nif (ReadLine() == \"N\")                  //  will run before any of the tasks are executed\r\n    Exit(\"See you soon ...\");           //      (useful for one-off initialization)\r\n\r\nvar greeting = \"Hello\";                 //   you can override any script-level variables \r\nvar who = \"world\";                      //  with the values passed from the command line\r\n\r\n/// Prints greeting                     //  this F#-style summary will be shown in the task listing\r\n[Task] void Welcome()                   //  [Task] makes method runnable from the command line\r\n{                                       \r\n\tWriteLine(\"{greeting},{who}!\");     //  forget ugly string.Format and string concatenation \r\n}                                       //  with built-in support for string interpolation\r\n\r\n[Task] void Tell(\r\n    string what = \"Hello\",              //     for parameterized tasks you can supply\r\n    string whom = \"world\",              //     arguments directly from the command line\r\n    int times = 1,                      //  (string, int and boolean arguments are supported) \r\n    bool quiet = false                  //  + special switch syntax for booleans (eg, --quiet)\r\n)\r\n{\r\n    var emphasis = quiet ? \"\" : \"!\";\r\n    for (; times > 0; times--)\r\n\t    WriteLine(\"{what},{whom}{emphasis}\");\r\n}                                   \r\n\r\n[Step] void Clean()   \t\t\t        //      Steps are Tasks with 'run once' semantics      \r\n{\t\t\t\t\t                    //  (the foundation of any popular build automation tool)\r\n    Delete(\"{OutputPath}\\*.*\");\t\r\n}                                   \r\n\r\n[Step] void Build(string cfg = \"Debug\")\r\n{\t\t\t\t\t                    \r\n    Clean();                            //  unlike popular build automation tools, there is no any\r\n    -------                             //    special syntax to specify task (step) dependencies\r\n    MSBuild(\"Nake.sln\", cfg);           //      (it's just plain old C# method invocation)\r\n}                                       \r\n                                       \r\n[Step] void Test()\r\n{\t\t\t\t\t                    \r\n    Clean();                            //         you have complete control over decision,\r\n    Build();                            //     when and in what order dependent steps should run\r\n    -------                             //  (Nake will guarantee that any step will run only once)\r\n    NUnit(\"{OutputPath}\\*.Tests.dll\")   \r\n}\r\n\r\n[Step] void Publish(bool beta = false)\r\n{\t\t\t\t\t                    \r\n    Test();                             //   sometimes, you need to execute the same step but with\r\n    Build(\"Release\");                   //  different arguments. Unlike other build automation tools\r\n    ------                              //  there is no special syntax to force step to run again - \r\n    Nuget(\"Nake.nuspec\", beta)          //       you just invoke it with different arguments!\r\n}                                       \r\n\r\nvar apiKey = \"$NugetKey$\";              //  $var$ is the shortcut syntax for getting \r\nPush(apiKey, \"{PackagePath}\");          //      value of environment variable\r\n\r\nWrite(\"$NakeStartupDirectory$\");        //  these special environment variables\r\nWrite(\"$NakeScriptDirectory$\");         //   are automatically created by Nake\r\n\r\nWrite(\"{{esc}}\");                       //  will simply print {esc} (no string interpolation)\r\nWrite(\"$$esc$$\");                       //  will simply print $esc$ (no env variable inlining)\r\n\r\nclass Azure                             //  namespace declarations cannot be used with scripts,\r\n{                                       //  but could be easily emulated with class declarations\r\n    class Queue                         //     and you can nest them infinitely as you like\r\n    {    \r\n        [Task] void Clean()             //     then from the command line you would invoke\r\n        {}                              //  this task by its full path (ie, azure.queue.clean)\r\n    }\r\n}\r\n\r\n[Task] void Default()                   //     running Nake without any options \r\n{                                       //  will cause it to run the \"default\" task\r\n\tBuild();\r\n}\r\n```\r\n\r\n## Command line reference\r\n\r\nGeneral syntax is: `Nake [options ...]  [VAR=VALUE ...]  [task ...]`\r\n\r\n```cs\r\n> Nake -f \"Nake.csx\" Log=1 build        //   set Log environment variable to 1 and\r\n                                        //  then run Build() task from Nake.csx file \r\n                                        \r\n> Nake Log=1 build                      //  equivalent to the above as Nake will automatically try \r\n                                        //   to use Nake.csx file if present in current directory\r\n```\r\n\r\nOptions:\r\n\r\n\t   -?  --help             Display help message and exit\r\n\t   -v  --version          Display the program version and exit\r\n\t   -q  --quiet            Do not echo informational messages to standard output\r\n\t   -s  --silent           Same as --quiet but also suppresses user generated log messages\r\n\t   -f  --nakefile FILE    Use FILE as Nake project file\r\n\t   -d  --directory DIR    Use DIR as current directory\r\n\t   -t  --trace            Enables task execution tracing and full stack traces in exception messages\r\n\t       --debug            Enables full script debugging in Visual Studio\r\n\t   -T  --tasks [PATTERN]  Display the tasks with descriptions matching optional PATTERN and exit\r\n\r\n### Invoking tasks\r\n\r\nGeneral syntax for invoking tasks and passing arguments is similar to the normal C# method invocation syntax, except ` ` is used instead of `,` to separate task arguments, and `=` is used instead of `:` for specifying named argument values. Also, boolean arguments support special `--` switch syntax.\r\n\r\n```cs\r\n> Nake build                            //  run Build task with default arg values\r\n> Nake build Release                    //  or with first positional argument set to 'Release'\r\n> Nake build cfg=Release                //  or with named argument 'cfg' set to 'Release'\r\n> Nake build Release outDir=\"C:\\Temp\"   //  you can mix positional and named arguments\r\n> Nake build ; test                     //  or invoke multiple tasks within a same session\r\n> Nake build `; test                    //  also escape ';' when running in PowerShell console \r\n> Nake publish --beta                   //  invoke Publish task with 'beta' arg set to 'true'\r\n```\r\n\r\n## Included utility reference\r\n\r\nOut-of-the box Nake includes a lot of useful convinient utility functions to help you with: \r\n\r\n- running external tools, such as command-line commands or MSBuild\r\n- selecting and transforming file system paths (globber)\r\n- casual file system tasks, such as copying, moving, deleting files/folders \r\n- logging messages to console\r\n- working with environment variables\r\n- controlling Nake's runner\r\n- etc\r\n\r\nCheck out table below for reference on using utility library:\r\n\r\n| Class         \t\t\t\t\t\t                    | Functions     \t\t\t\t\t                    |\r\n|:----------------------------------------------------------|:------------------------------------------------------|\r\n| [Run](https://github.com/yevhen/Nake/wiki/Run)          \t| Running external tools: Cmd, MSBuild              \t|\r\n| [App](https://github.com/yevhen/Nake/wiki/App)           \t| Controlling Nake's runner              \t\t        |\r\n| [Log](https://github.com/yevhen/Nake/wiki/Log)          \t| Logging messages to console              \t\t        |\r\n| [Env](https://github.com/yevhen/Nake/wiki/Env)          \t| Working with environment variables              \t    |\r\n| [FS](https://github.com/yevhen/Nake/wiki/FS)            \t| File-system tasks, such as cop/move/etc              \t|\r\n| [FileSet](https://github.com/yevhen/Nake/wiki/FileSet)  \t| File path selection and transformation (globber)      |\r\n| [Color](https://github.com/yevhen/Nake/wiki/Color)      \t| Printing to console in color              \t\t    |\r\n| [Location](https://github.com/yevhen/Nake/wiki/Location)\t| Current directory and special paths (script, startup) |\r\n\r\nAlso, see 'by use-case' reference on [wiki](https://github.com/yevhen/Nake/wiki).\r\n\r\n## Tips & tricks\r\n\r\n```cs\r\nclass Azure\r\n{                                       \r\n    StorageAccount account;\r\n    \r\n    static Azure()                      //  this will run once before any of the \r\n    {                                   //  tasks in this namespace are executed\r\n        account = Init();               //  (useful for one-off initialization)\r\n    }\r\n}  \r\n```\r\n\r\n## Backlog\r\n\r\n- Running on Mono\r\n- Interactive mode\r\n\r\n## Contributing\r\n\r\nGimme your pull requests!\r\n\r\n## Samples and Documentation\r\n\r\nHave a look at [Nake.csx](https://github.com/yevhen/Nake/blob/dev/Nake.csx) or [Publish.csx](https://github.com/yevhen/Nake/blob/dev/Publish.csx). Those are the Nake files used to build and publish Nake itself (ye, we're eating our own dog food). Also, additional samples can be contributed to samples [repository](https://github.com/yevhen/Nake-samples).\r\n\r\n## Community\r\n\r\nGeneral discussion group could be found [here](https://groups.google.com/forum/#!forum/naketool). Also, for news you can follow Nake's [official](https://twitter.com/NakeTool) twitter account (or [my](https://twitter.com/yevhen) account for that matter). The twitter's hashtag is `#naketool`.\r\n\r\n## Credits\r\n- Thanks to everyone in the Roslyn compiler team for making this happen\r\n- Thanks to all members of the [scriptcs](https://github.com/scriptcs) team for lending me their script pre-processing code\r\n- Special thanks to [Anton Martynenko](https://twitter.com/aamartynenko) for giving me an idea and steering Nake's DSL in the right direction\r\n- Hugs and kisses to my lovely Valery for being so patient and supportive, and for feeding me food and beer, while I was sitting in my cage working on Nake, instead of spending that time with her\r\n\r\n## License\r\n\r\nApache 2 License\r\n","google":"UA-46291804-1","note":"Don't delete this file! It's used internally to help with page regeneration."}